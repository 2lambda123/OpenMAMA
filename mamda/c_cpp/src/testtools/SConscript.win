#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
Import('env')
env = env.Clone()

includePath = []
includePath.append('.')
includePath.append('..')
includePath.append('../cpp')
includePath.append('../cpp/mamda')
includePath.append('../cpp/options')
includePath.append('../cpp/orderbooks')
includePath.append('#mama/c_cpp/src/c')
includePath.append('#mama/c_cpp/src/cpp')
includePath.append('#common/c_cpp/src/c')
includePath.append('#common/c_cpp/src/cpp')
includePath.append('$incdir')

libPath = []
libPath.append('$libdir')

env.LogDebug("")
env.LogDebug("%s" % env['libdir'])
env.LogDebug("")

env['CPPDEFINES'] = [ x for x in env['CPPDEFINES'] if x != 'MAMDA' ]

env.Append(
    LIBPATH =libPath,
    CPPPATH = includePath,
    LIBS=[
    'libmamdabook%s' % env['suffix'],
    'libmamda%s' % env['suffix'],
    'libmamacpp%s' % env['suffix'],
    'libwombatcommon%s' % env['suffix'],
    'libmamac%s' % env['suffix'],
    ],
    CPPDEFINES = ['MAMDAOPT','MAMDA_DLL'])

bins = ['bookselftest', 'quoteselftest', 'tradeselftest']

binary = []


for b in bins:
    binary.append(env.Program(b, ['%s.cpp' % b, 
        '../examples/parsecmd.obj', 
        '../examples/dictrequester.obj'
        ]))

Alias('install', env.Install('$bindir', binary))
